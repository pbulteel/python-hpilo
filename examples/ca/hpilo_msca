#!/usr/bin/env python
#
# (c) 2011-2016 Dennis Kaarsemaker <dennis@kaarsemaker.net>
# see COPYING for license details
# Modified: Patrick Bulteel <patrick.bulteel@telefonica.com>
# Date: 2019-12-20
# Changelog: Added ability to call a Microsoft CA endpoint for signing of CSR.
#

try:
    import ConfigParser
except ImportError:
    import configparser as ConfigParser
import hpilo
import optparse
import os
import re
import subprocess
import sys
import time
from certsrv import Certsrv

def main():
    usage = """%prog [options] init
%prog [options] sign hostname [hostname ...]"""
    p = optparse.OptionParser(usage=usage)
    p.add_option("-l", "--login", dest="login", default=None,
                 help="Username to access the iLO")
    p.add_option("-p", "--password", dest="password", default=None,
                 help="Password to access the iLO")
    p.add_option("-c", "--config", dest="config", default="~/.ilo.conf",
                 help="File containing authentication and config details", metavar="FILE")
    p.add_option("-t", "--timeout", dest="timeout", type="int", default=60,
                 help="Timeout for iLO connections")
    p.add_option("-P", "--protocol", dest="protocol", choices=("http","raw"), default=None,
                 help="Use the specified protocol instead of autodetecting")
    p.add_option("-d", "--debug", dest="debug", action="count", default=0,
                 help="Output debug information, repeat to see all XML data")
    p.add_option("-o", "--port", dest="port", type="int", default=443,
                 help="SSL port to connect to")
    p.add_option("-s", "--server", dest="ca_server", default=None,
                 help="CA Server to connect to")
    p.add_option("-L", "--ca-login", dest="ca_login", default=None,
                help="Username to access the CA")
    p.add_option("-A", "--ca-password", dest="ca_password", default=None,
                help="Password to access the CA")
    p.add_option("-u", "--upgrade", dest="upgrade", action="store_true", default=False,
                 help="Upgrade iLO firmware that is too old automatically")

    opts, args = p.parse_args()

    if not args or args[0] not in ('sign'):
        p.print_help()
        p.exit(1)

    if not os.path.exists(os.path.expanduser(opts.config)):
        p.error("Configuration file '%s' does not exist" % opts.config)

    # Getting all the CA configuration information from config file and CLI options
    config = ConfigParser.ConfigParser()
    config.read(os.path.expanduser(opts.config))
    if not config.has_option('ca', 'server'):
        p.error("No CA server specified in the config")
    ca_path = os.path.expanduser(config.get('ca', 'path'))
    # We store the CSR and CRTs - make sure we have the paths for this.
    if not os.path.exists(ca_path):
        os.makedirs(ca_path)
        os.path.join(ca_path, 'certs')
    csr_params = {}
    for key in ('country', 'state', 'locality', 'organization', 'organizational_unit'):
        if config.has_option('ca', key):
            csr_params[key] = config.get('ca', key)
    # Check we have the server and login details. Make sure that the user is allowed to sign and retried the cert
    if config.has_option('ca', 'server'):
        ca_server = config.get('ca', 'server')
    if config.has_option('ca', 'ca_login'):
        ca_login = config.get('ca', 'ca_login')
    if config.has_option('ca', 'ca_password'):
        ca_password = config.get('ca', 'ca_password')
    if opts.ca_login:
        ca_login = opts.ca_login
    if opts.ca_password:
        ca_password = opts.ca_password
    if not ca_login or not ca_password:
        p.error("No CA login details provided")
    if opts.ca_server:
        ca_server = opts.ca_server
    if not ca_server:
        p.error("No CA server provided")

     # Do we have ILO login information
    login = None
    password = None
    if config.has_option('ilo', 'login'):
        login = config.get('ilo', 'login')
    if config.has_option('ilo', 'password'):
        password = config.get('ilo', 'password')
    if opts.login:
        login = opts.login
    if opts.password:
        password = opts.password
    todo = args[1:]
    for host in args[1:]:
        if re.match(r'\d+(\.\d+){3}', host):
            p.error("hpilo_msca only accepts fqdns, not IP addresses")
        if '.' not in host:
            p.error("hpilo_msca only accepts fqdns, not hostnames")
    while todo:
        todo = sign_certificates(todo, ca_server, login, password, opts, ca_login, ca_password, ca_path, csr_params)
        if todo:
            print("Waiting a minute before trying %d hosts again" % len(todo))
            what = "\|/-"
            for i in range(60):
                sys.stdout.write("\r%s %-2d" % (what[i%4], 60-i))
                sys.stdout.flush()
                time.sleep(1)
            sys.stdout.write("\r    \r")
            sys.stdout.flush()

def sign_certificates(hosts, ca_server, login, password, opts, ca_login, ca_password, ca_path, csr_params):
    """
        Uses a MS CA to sign the certificates.

        Args:
            hosts: List of hosts to process.
            ca_server: MS CA Server ip or fqdn
            login: ilo login
            password: ilo password
            opts: options passed in
            ca_login: CA login account with rights to create and sign certificates
            ca_password: Password of CA login account
            ca_path: path to where certs will be saved to.
            csr_params: list of parameters in the CSR.
        
    """
    if ca_server:
        msca_server = Certsrv(ca_server, ca_login, ca_password, auth_method='ntlm', cafile='/etc/ssl/certs/O2WIFI_Root_CA.pem')

    todo = []
    for hostname in hosts:
        
        msca = MSCA(msca_server, ca_path, csr_params, ca_login, ca_password)    
        if msca.signed(hostname):
            print("Certificate already signed, skipping")
            continue

        ilo = hpilo.Ilo(hostname, login, password, opts.timeout, opts.port)
        ilo.debug = opts.debug
        if opts.protocol == 'http':
            ilo.protocol = hpilo.ILO_HTTP
        elif opts.protocol == 'raw':
            ilo.protocol = hpilo.ILO_RAW

        print("(1/5) Checking certificate config of %s" % hostname)
        try:
            fw_version = ilo.get_fw_version()
        except hpilo.IloCommunicationError:
            print("ILO communication failure. Trying again later.")
            todo.append(hostname)
            continue
        network_settings = ilo.get_network_settings()
        if fw_version['management_processor'].lower() == 'ilo2':
            version = fw_version['firmware_version']
            if version < '2.06':
                print("iLO2 firmware version %s is too old" % version)
                if not opts.upgrade:
                    print("Please upgrade firmware to 2.06 or newer")
                    continue
                print("Upgrading iLO firmware")
                ilo.update_rib_firmware(version='latest', progress=print_progress)
                todo.append(hostname)
                continue
            cn = ilo.get_cert_subject_info()['csr_subject_common_name']
            if '.' not in cn:
                ilo.cert_fqdn(use_fqdn=True)
                cn = ilo.get_cert_subject_info()['csr_subject_common_name']

        hn, dn = hostname.split('.', 1)
        if network_settings['dns_name'] != hn or dn and network_settings['domain_name'] != dn:
           print("Hostname misconfigured on the ilo, fixing")
           ilo.mod_network_settings(dns_name=hn, domain_name=dn)
           todo.append(hostname)
           continue

        print("(2/5) Retrieving certificate signing request")
        if fw_version['management_processor'].lower() == 'ilo2':
            try:
                csr = ilo.certificate_signing_request()
            except hpilo.IloError:
                # ILO2 doesn't give "IloGeneratingCSR" 
                print("Certificate request is being generated, trying again later")
                todo.append(hostname)
                continue
        else:
            params = msca.csr_params.copy()
            cn = '%s.%s' % (network_settings['dns_name'], network_settings['domain_name'])
            params['common_name'] = cn
            try:
                csr = ilo.certificate_signing_request(**params)
            except hpilo.IloGeneratingCSR:
                print("Certificate request is being generated, trying again later")
                todo.append(hostname)
                continue
        if not csr:
            print("Received an empty CSR")
            continue

        print("(3/5) Signing certificate")
        cert = msca.sign(network_settings, csr)
        
        print("(4/5) Uploading certificate")
        try:
            ilo.import_certificate(cert)
        except hpilo.IloCommunicationError:
            print("ILO still unreachable, trying again later")
            todo.append(hostname)
            continue    

        print("(5/5) Resetting iLO")
        try:
            ilo.reset_rib()
        except hpilo.IloCommunicationError:
            print("ILO communication failure. Trying again later.")
            todo.append(hostname)
        
    return todo

class MSCA(object):
    def __init__(self, msca_server, ca_path, csr_params, ca_login, ca_password):
        self.msca_server = msca_server
        self.ca_path = ca_path
        self.csr_params = csr_params
        self.ca_login = ca_login
        self.ca_password = ca_password
    
    def signed(self, fqdn):
        """
        Checks if we have a certificate.
        It doesn't check if the certificate we have has expired.

        Args:
            fqdn: FQDN of ilo

        """
        crt_path = os.path.join(self.ca_path, 'certs', fqdn + '.crt')
        return os.path.exists(crt_path)

    def sign(self, network_settings, csr):
        """
        Signs the CSR generated by the ILO by submitting it to the MS CA.

        Args:
            network_settings: list of network settings, IP, hostname, domain, etc from the ILO
            csr: the ILO generated CSR

        """
        hostname = network_settings['dns_name']
        fqdn = '%s.%s' % (network_settings['dns_name'], network_settings['domain_name'])
        ip = network_settings['ip_address']
        altnames = 'san:dns=%s&dns=%s&ip=%s' % (fqdn, hostname, ip)

        csr_path = os.path.join(self.ca_path, 'certs', fqdn + '.csr')
        crt_path = os.path.join(self.ca_path, 'certs', fqdn + '.crt')
        fd = open(csr_path, 'w')
        fd.write(csr)
        fd.close()
        # Send the CSR to the MSCA and uses the WebServer template for the cert - include altnames.
        cert = self.msca_server.get_cert(csr, "WebServer", encoding="b64", attributes=altnames)
        
        fd = open(crt_path, 'w')
        fd.write(cert)
        #cert = fd.read()
        fd.close()
        cert = cert[cert.find('-----BEGIN'):]    
        
        return cert

def print_progress(text):
    if text.startswith('\r'):
        sys.stdout.write(text)
        sys.stdout.flush()
    else:
        print(text)

if __name__ == '__main__':
    main()
